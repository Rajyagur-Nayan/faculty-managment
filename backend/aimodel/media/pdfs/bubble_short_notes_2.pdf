%PDF-1.3
%ºß¬à
3 0 obj
<</Type /Page
/Parent 1 0 R
/Resources 2 0 R
/MediaBox [0 0 595.2799999999999727 841.8899999999999864]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 2652
>>
stream
0.5670000000000001 w
0 G
BT
/F1 16 Tf
18.3999999999999986 TL
0 g
28.3464566929133888 813.5435433070865656 Td
(• Definition: A simple, comparison-based sorting algorithm.) Tj
T* (• Core Concept: Repeatedly steps through the list, compares adjacent) Tj
T* (elements, and swaps them if they are in the wrong order.) Tj
T* (• Analogy: The largest unsorted element "bubbles" up to its correct) Tj
T* (position during each pass.) Tj
T* (• Algorithm Steps:) Tj
T* (    1. Start a loop from the beginning of the list to the second-to-last) Tj
T* (element. This is the "pass" loop.) Tj
T* (    2. Inside this loop, start another loop to compare adjacent elements.) Tj
T* (    3. Compare the current element with the next element.) Tj
T* (    4. If the current element is greater than the next element, swap them.) Tj
T* (    5. After the first pass, the largest element is at the end of the list.) Tj
T* (    6. Reduce the range of the next pass to exclude the already sorted) Tj
T* (elements at the end.) Tj
T* (    7. Repeat the passes until the list is sorted.) Tj
T* (• Time Complexity \(Exam Point\):) Tj
T* (    • Worst Case: O\(n²\) - when the list is in reverse order.) Tj
T* (    • Average Case: O\(n²\)) Tj
T* (    • Best Case: O\(n\) - when the list is already sorted \(only if an) Tj
T* (optimization is used\).) Tj
T* (• Space Complexity \(Exam Point\): O\(1\) - It is an in-place sorting) Tj
T* (algorithm.) Tj
T* (• Key Characteristics:) Tj
T* (    • Stable: The relative order of equal elements is preserved.) Tj
T* (    • In-place: Requires minimal additional memory space.) Tj
T* (• Optimization:) Tj
T* (    • Introduce a boolean flag \(e.g., `swapped`\).) Tj
T* (    • If a full pass is completed with no swaps, the list is sorted, and the) Tj
T* (algorithm can terminate early. This is crucial for achieving O\(n\)) Tj
T* (best-case performance.) Tj
T* (• Advantages:) Tj
T* (    • Simple to understand and implement.) Tj
T* (    • Good for introducing the concept of sorting algorithms.) Tj
T* (    • Efficient for very small or nearly-sorted lists.) Tj
T* (• Disadvantages:) Tj
T* (    • Very inefficient for large datasets.) Tj
T* (    • Outperformed by algorithms like Insertion Sort, Merge Sort, and) Tj
T* (Quick Sort in most scenarios.) Tj
T* (• Common Exam Questions:) Tj
T* (    • Trace the state of a given array after each pass of bubble sort.) Tj
T* (    • Calculate the total number of swaps or comparisons for a given list.) Tj
T* (    • Explain the worst-case scenario and why it results in O\(n²\)) Tj
T* (complexity.) Tj
T* (    • Compare the performance of bubble sort with selection sort or) Tj
T* (insertion sort.) Tj
ET
endstream
endobj
1 0 obj
<</Type /Pages
/Kids [3 0 R ]
/Count 1
>>
endobj
5 0 obj
<<
/Type /Font
/BaseFont /Helvetica
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
6 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
7 0 obj
<<
/Type /Font
/BaseFont /Helvetica-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
8 0 obj
<<
/Type /Font
/BaseFont /Helvetica-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
9 0 obj
<<
/Type /Font
/BaseFont /Courier
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
10 0 obj
<<
/Type /Font
/BaseFont /Courier-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
11 0 obj
<<
/Type /Font
/BaseFont /Courier-Oblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
12 0 obj
<<
/Type /Font
/BaseFont /Courier-BoldOblique
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
13 0 obj
<<
/Type /Font
/BaseFont /Times-Roman
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
14 0 obj
<<
/Type /Font
/BaseFont /Times-Bold
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
15 0 obj
<<
/Type /Font
/BaseFont /Times-Italic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
16 0 obj
<<
/Type /Font
/BaseFont /Times-BoldItalic
/Subtype /Type1
/Encoding /WinAnsiEncoding
/FirstChar 32
/LastChar 255
>>
endobj
17 0 obj
<<
/Type /Font
/BaseFont /ZapfDingbats
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
18 0 obj
<<
/Type /Font
/BaseFont /Symbol
/Subtype /Type1
/FirstChar 32
/LastChar 255
>>
endobj
2 0 obj
<<
/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]
/Font <<
/F1 5 0 R
/F2 6 0 R
/F3 7 0 R
/F4 8 0 R
/F5 9 0 R
/F6 10 0 R
/F7 11 0 R
/F8 12 0 R
/F9 13 0 R
/F10 14 0 R
/F11 15 0 R
/F12 16 0 R
/F13 17 0 R
/F14 18 0 R
>>
/XObject <<
>>
>>
endobj
19 0 obj
<<
/Producer (jsPDF 3.0.2)
/CreationDate (D:20250915041841+05'30')
>>
endobj
20 0 obj
<<
/Type /Catalog
/Pages 1 0 R
/OpenAction [3 0 R /FitH null]
/PageLayout /OneColumn
>>
endobj
xref
0 21
0000000000 65535 f 
0000002856 00000 n 
0000004673 00000 n 
0000000015 00000 n 
0000000152 00000 n 
0000002913 00000 n 
0000003038 00000 n 
0000003168 00000 n 
0000003301 00000 n 
0000003438 00000 n 
0000003561 00000 n 
0000003690 00000 n 
0000003822 00000 n 
0000003958 00000 n 
0000004086 00000 n 
0000004213 00000 n 
0000004342 00000 n 
0000004475 00000 n 
0000004577 00000 n 
0000004921 00000 n 
0000005007 00000 n 
trailer
<<
/Size 21
/Root 20 0 R
/Info 19 0 R
/ID [ <9D38561C1AF9C315E0CFFDF1803A2450> <9D38561C1AF9C315E0CFFDF1803A2450> ]
>>
startxref
5111
%%EOF